// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modelo de Usuário (administradores, funcionários, etc.)
model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  role      String   @default("pdv") // admin, pdv
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Modelo de Cliente
model Customer {
  id         String   @id @default(uuid())
  name       String
  phone      String
  email      String?  @unique
  doc        String?  // CPF/CNPJ
  barcode    String?  @unique // Código de barras para identificação rápida no PDV
  address    Json?    // Endereço em formato JSON
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  orders     Order[]
  presets    CustomerProductPreset[] // Presets de produtos para este cliente
  preOrders  PreOrder[]
}

// Modelo de Categoria de Produto
model Category {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  products  Product[]
}

// Modelo de Produto
model Product {
  id              String   @id @default(uuid())
  name            String
  barcode         String?  @unique
  categoryId      String?
  priceCents      Int      @default(0) // Preço em centavos para evitar problemas de arredondamento
  description     String?
  stockEnabled    Boolean  @default(false)
  stock           Int?
  imageUrl        String?
  productType     String   @default("sellable") // sellable, addon
  variableProduct Boolean  @default(false)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  category        Category? @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  customerPresets CustomerProductPreset[] // Presets de clientes que incluem este produto
  preOrderItems   PreOrderItem[]

  @@index([categoryId])
}

// Enum para métodos de pagamento
enum PaymentMethod {
  cash
  credit
  debit
  pix
  invoice
  ficha_payment
}

// Modelo de Pedido
model Order {
  id                     String         @id @default(uuid())
  customerId             String?
  status                 String         @default("pending") // pending, confirmed, preparing, ready, delivered, cancelled
  subtotalCents          Int            @default(0)
  discountCents          Int            @default(0)
  deliveryFeeCents       Int            @default(0)
  totalCents             Int            @default(0)
  paymentMethod          PaymentMethod?
  cashReceivedCents      Int?     // Valor recebido em centavos para pagamentos em dinheiro
  changeCents            Int?     // Troco em centavos para pagamentos em dinheiro
  fichaPaymentForOrderId String?  // ID da venda original que este pagamento está liquidando
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relacionamentos
  customer               Customer? @relation(fields: [customerId], references: [id])
  fichaPaymentForOrder   Order?    @relation("FichaPayment", fields: [fichaPaymentForOrderId], references: [id])
  fichaPayments          Order[]   @relation("FichaPayment")
  items                  OrderItem[]

  @@index([customerId])
  @@index([status])
  @@index([createdAt])
}

// Modelo de Item do Pedido
model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  priceCents Int     @default(0) // Preço no momento da venda

  // Relacionamentos
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

// Modelo de Preset de Produtos para Cliente
model CustomerProductPreset {
  id         String   @id @default(uuid())
  customerId String
  productId  String
  quantity   Int      @default(1)
  active     Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relacionamentos
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([customerId, productId])
  @@index([customerId])
  @@index([productId])
}

// Modelo de Pré-Pedido
model PreOrder {
  id              String         @id @default(uuid())
  customerId      String?
  subtotalCents   Int            @default(0)
  discountCents   Int            @default(0)
  deliveryFeeCents Int           @default(0)
  totalCents      Int            @default(0)
  notes           String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relacionamentos
  customer        Customer?      @relation(fields: [customerId], references: [id])
  items           PreOrderItem[]

  @@index([customerId])
  @@index([createdAt])
}

// Modelo de Item do Pré-Pedido
model PreOrderItem {
  id         String    @id @default(uuid())
  preOrderId String
  productId  String
  quantity   Int       @default(1)
  priceCents Int       @default(0)

  // Relacionamentos
  preOrder   PreOrder  @relation(fields: [preOrderId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])

  @@index([preOrderId])
  @@index([productId])
}
